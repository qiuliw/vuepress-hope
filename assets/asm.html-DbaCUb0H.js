import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as t,c as a,e as n}from"./app-jG9re2PU.js";const o={},i=n(`<h1 id="汇编错题" tabindex="-1"><a class="header-anchor" href="#汇编错题"><span>汇编错题</span></a></h1><h2 id="堆栈" tabindex="-1"><a class="header-anchor" href="#堆栈"><span>堆栈</span></a></h2><p>设当前的 SP=0100H，执行 <code>PUSH AX</code> 指令后，SP=__H。若改为执行 <code>INT 21H</code> 指令后，则 SP=__H。</p><blockquote><p>答：0FEH,0FAH</p></blockquote><div class="language-NASM line-numbers-mode" data-ext="NASM" data-title="NASM"><pre class="language-NASM"><code>PUSH AX ; SP-2,压入AX
INT N ; SP-6,压入FR,CS,IP
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>若当前 SP=6000H，CPU 执行一条 <code>IRET</code> 指令后，SP=__H ; 而当CPU执行一条段内返回指令 <code>RET 6</code> 后，SP=__H。</p><blockquote><p>答：60006H,6008H</p></blockquote><div class="language-nasm line-numbers-mode" data-ext="nasm" data-title="nasm"><pre class="language-nasm"><code>IRET <span class="token comment">; 弹出IP、CS、FR;SP+6</span>
RET <span class="token number">6</span><span class="token comment">; SP+2+6 即弹出IP后+6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,9),s=[i];function c(r,d){return t(),a("div",null,s)}const m=e(o,[["render",c],["__file","asm.html.vue"]]),u=JSON.parse('{"path":"/jieben/asm.html","title":"汇编错题","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-03-21T00:00:00.000Z","category":["接本"],"tags":["asm"],"description":"汇编错题 堆栈 设当前的 SP=0100H，执行 PUSH AX 指令后，SP=__H。若改为执行 INT 21H 指令后，则 SP=__H。 答：0FEH,0FAH 若当前 SP=6000H，CPU 执行一条 IRET 指令后，SP=__H ; 而当CPU执行一条段内返回指令 RET 6 后，SP=__H。 答：60006H,6008H","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/vuepress-hope/jieben/asm.html"}],["meta",{"property":"og:site_name","content":"Q的博客"}],["meta",{"property":"og:title","content":"汇编错题"}],["meta",{"property":"og:description","content":"汇编错题 堆栈 设当前的 SP=0100H，执行 PUSH AX 指令后，SP=__H。若改为执行 INT 21H 指令后，则 SP=__H。 答：0FEH,0FAH 若当前 SP=6000H，CPU 执行一条 IRET 指令后，SP=__H ; 而当CPU执行一条段内返回指令 RET 6 后，SP=__H。 答：60006H,6008H"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-21T03:51:20.000Z"}],["meta",{"property":"article:author","content":"Qiuliw"}],["meta",{"property":"article:tag","content":"asm"}],["meta",{"property":"article:published_time","content":"2024-03-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-21T03:51:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"汇编错题\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-21T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-21T03:51:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Qiuliw\\",\\"url\\":\\"https://www.github.io/qiuliw\\"}]}"]]},"headers":[{"level":2,"title":"堆栈","slug":"堆栈","link":"#堆栈","children":[]}],"git":{"createdTime":1710993080000,"updatedTime":1710993080000,"contributors":[{"name":"qiuliw","email":"1807191473@qq.com","commits":1}]},"readingTime":{"minutes":0.41,"words":124},"filePathRelative":"jieben/asm.md","localizedDate":"2024年3月21日","excerpt":"\\n<h2>堆栈</h2>\\n<p>设当前的 SP=0100H，执行 <code>PUSH AX</code> 指令后，SP=__H。若改为执行 <code>INT 21H</code> 指令后，则 SP=__H。</p>\\n<blockquote>\\n<p>答：0FEH,0FAH</p>\\n</blockquote>\\n<div class=\\"language-NASM\\" data-ext=\\"NASM\\" data-title=\\"NASM\\"><pre class=\\"language-NASM\\"><code>PUSH AX ; SP-2,压入AX\\nINT N ; SP-6,压入FR,CS,IP\\n</code></pre></div>","autoDesc":true}');export{m as comp,u as data};
